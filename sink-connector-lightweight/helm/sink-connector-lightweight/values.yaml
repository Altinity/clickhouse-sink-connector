# Default values for sink-connector-lightweight.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.gitlab.com/altinity-public/container-images/clickhouse_debezium_embedded
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistentvolume:
  hostPath: "/mnt/data"

### Debezium storage mount path
debezium:
  pod:
    mountPath: "/usr/share/debezium/storage"

# Specify the location of a custom config.yaml configmap name
# configmapName: "my-custom-configmap"
# 
# If using a custom configmap (not created by the chart) then
# ensure the configmap is located under the config.yaml path.
# See the configmap.yaml template file for an example
#
# If not using a custom configmap, use the below configuration 
# and modify according to your requirements:

#### Postgres Configuration
# config:
#   name: "debezium-embedded-postgres"
#   database.hostname: "postgres"
#   database.port: "5432"
#   database.user: "root"
#   database.password: "root"
#   database.server.name: "ER54"
#   schema.include.list: public
#   plugin.name: "pgoutput"
#   table.include.list: "public.tm,public.tm2"
#   clickhouse.server.url: "clickhouse"
#   clickhouse.server.user: "root"
#   clickhouse.server.password: "root"
#   clickhouse.server.port: "8123"
#   database.allowPublicKeyRetrieval: "true"
#   snapshot.mode: "initial"
#   offset.flush.interval.ms: 5000
#   connector.class: "io.debezium.connector.postgresql.PostgresConnector"
#   offset.storage: "io.debezium.storage.jdbc.offset.JdbcOffsetBackingStore"
#   offset.storage.offset.storage.jdbc.offset.table.name: "altinity_sink_connector.replica_source_info"
#   offset.storage.jdbc.url: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"
#   offset.storage.jdbc.user: "root"
#   offset.storage.jdbc.password: "root"
#   offset.storage.offset.storage.jdbc.offset.table.ddl: "CREATE TABLE if not exists %s
#   (
#     `id` String,
#     `offset_key` String,
#     `offset_val` String,
#     `record_insert_ts` DateTime,
#     `record_insert_seq` UInt64,
#     `_version` UInt64 MATERIALIZED toUnixTimestamp64Nano(now64(9))
#   )
#   ENGINE = ReplacingMergeTree(_version)
#   ORDER BY id
#   SETTINGS index_granularity = 8192"
#   offset.storage.offset.storage.jdbc.offset.table.delete: "delete from %s where 1=1"
#   schema.history.internal: "io.debezium.storage.jdbc.history.JdbcSchemaHistory"
#   schema.history.internal.jdbc.url: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"
#   schema.history.internal.jdbc.user: "root"
#   schema.history.internal.jdbc.password: "root"
#   schema.history.internal.jdbc.schema.history.table.ddl: "CREATE TABLE if not exists %s
#   (`id` VARCHAR(36) NOT NULL, `history_data` VARCHAR(65000), `history_data_seq` INTEGER, `record_insert_ts` TIMESTAMP NOT NULL, `record_insert_seq` INTEGER NOT NULL) ENGINE=ReplacingMergeTree(record_insert_seq) order by id"

#   schema.history.internal.jdbc.schema.history.table.name: "altinity_sink_connector.replicate_schema_history"
#   enable.snapshot.ddl: "true"
#   auto.create.tables: "true"
#   database.dbname: "public"

#### Generic DB Config
config:
  name: "company-1"
  database.hostname: "mysql"
  database.port: "3306"
  database.user: "root"
  database.password: "password"
  database.server.name: "ER54"
  database.include.list: "test"
  #table.include.list=sbtest1
  clickhouse.server.url: "chi-argocd-demo-0-0"
  clickhouse.server.user: "root"
  clickhouse.server.pass: "secretsecret"
  clickhouse.server.port: "8123"
  database.allowPublicKeyRetrieval: "true"
  snapshot.mode: "initial"
  offset.flush.interval.ms: "5000"
  connector.class: "io.debezium.connector.mysql.MySqlConnector"
  offset.storage: "io.debezium.storage.jdbc.offset.JdbcOffsetBackingStore"
  offset.storage.offset.storage.jdbc.offset.table.name: "altinity_sink_connector.replica_source_info"
  offset.storage.jdbc.url: "jdbc:clickhouse://chi-argocd-demo-0-0:8123/altinity_sink_connector"
  offset.storage.jdbc.user: "root"
  offset.storage.jdbc.password: "secretsecret"
  offset.storage.offset.storage.jdbc.offset.table.ddl: "CREATE TABLE if not exists %s
    (
      `id` String,
      `offset_key` String,
      `offset_val` String,
      `record_insert_ts` DateTime,
      `record_insert_seq` UInt64,
      `_version` UInt64 MATERIALIZED toUnixTimestamp64Nano(now64(9))
  )
  ENGINE = ReplacingMergeTree(_version)
  ORDER BY id
  SETTINGS index_granularity = 8192"
  offset.storage.offset.storage.jdbc.offset.table.delete: "delete from %s where 1=1"
  schema.history.internal: "io.debezium.storage.jdbc.history.JdbcSchemaHistory"
  schema.history.internal.jdbc.url: "jdbc:clickhouse://chi-argocd-demo-0-0:8123/altinity_sink_connector"
  schema.history.internal.jdbc.user: "root"
  schema.history.internal.jdbc.password: "secretsecret"
  schema.history.internal.jdbc.schema.history.table.ddl: "CREATE TABLE if not exists %s
  (`id` VARCHAR(36) NOT NULL, `history_data` VARCHAR(65000), `history_data_seq` INTEGER, `record_insert_ts` TIMESTAMP NOT NULL, `record_insert_seq` INTEGER NOT NULL) ENGINE=ReplacingMergeTree(record_insert_seq) order by id"

  schema.history.internal.jdbc.schema.history.table.name: "altinity_sink_connector.replicate_schema_history"
  enable.snapshot.ddl: "true"